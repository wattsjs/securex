{
  "workflow": {
    "unique_name": "definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC",
    "name": "MCAS Umbrella Sync",
    "title": "MCAS Umbrella Sync",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "UMBRELLA_MANAGEMENT_SECRET",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7J5TUMUKD77Uafix7sF954jEJJqoknJ",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "CLIENT_ID",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7MVNBQQKC5r2nk2snMbQ9egZ12nyfo6",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "PORTAL_URL",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7MJJMK67T24pQx7vVo8CbChDNYztxlm",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "MCAS Sanctioned Applications - Blocked",
          "scope": "input",
          "name": "UMBRELLA_DESTINATION_LIST",
          "type": "datatype.string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7G5449QNT4EAOiZNtCtanJn3z64qifC",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "UMBRELLA_ORG_ID",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7JB0YC6AW2BZ6s3sMKx2v6ahBNDO1Ih",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "UMBRELLA_MANAGEMENT_KEY",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7J0IAK3TU0j3NQsz23NRmv6fM7kOeGv",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "CLIENT_SECRET",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7FTAKRSM61f7VaR3cBJGPDPwbyYhcCe",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "*****",
          "scope": "input",
          "name": "TENANT_ID",
          "type": "datatype.secure_string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01ZA7M8G1EJNJ0TN70m6FxX3mf0GAA2YCvA",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "Syncronise sanctioned applications in MCAS with an Umbrella destination block list",
      "display_name": "MCAS Umbrella Sync",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "no_target": true
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01ZA78QXKMNR10PG1dyXlvyp1sfuPW3EbYw",
        "name": "Execute Python Script",
        "title": "Execute Python Script",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "display_name": "Execute Python Script",
          "script": "import base64\nimport requests\n\nBASE_URL = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7MJJMK67T24pQx7vVo8CbChDNYztxlm$/api/\"\nTARGET_URL = BASE_URL + \"discovery_block_scripts/?format=120\u0026type=banned\"\n\nTENANT_ID = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7M8G1EJNJ0TN70m6FxX3mf0GAA2YCvA$\"\nCLIENT_ID = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7MVNBQQKC5r2nk2snMbQ9egZ12nyfo6$\"\nCLIENT_SECRET = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7FTAKRSM61f7VaR3cBJGPDPwbyYhcCe$\"\n\nTARGET_BLOCKLIST = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7G5449QNT4EAOiZNtCtanJn3z64qifC$\"\n\nUMBRELLA_MANAGEMENT_KEY = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7J0IAK3TU0j3NQsz23NRmv6fM7kOeGv$\"\nUMBRELLA_MANAGEMENT_SECRET = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7J5TUMUKD77Uafix7sF954jEJJqoknJ$\"\nUMBRELLA_ORG_ID = \"$workflow.definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC.input.variable_workflow_01ZA7JB0YC6AW2BZ6s3sMKx2v6ahBNDO1Ih$\"\n\n\ndef get_access_token():\n    \"\"\"Get an access token for the MCAS API\"\"\"\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    }\n    data = f\"grant_type=client_credentials\u0026client_id={CLIENT_ID}\u0026client_secret={CLIENT_SECRET}\u0026scope=05a65629-4c1b-48c1-a78b-804c4abdd4af/.default\"\n    response = requests.post(\n        f\"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token\",\n        headers=headers,\n        data=data,\n    )\n    response.raise_for_status()\n    return response.json()[\"access_token\"]\n\n\ndef get_mcas_blocklist():\n    \"\"\"Get the current MCAS blocklist\"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {get_access_token()}\",\n    }\n    response = requests.get(TARGET_URL, headers=headers)\n    response.raise_for_status()\n\n    # Split result on newlines and strip first character (preceding .)\n    return [line[1:] for line in response.text.splitlines()]\n\n\ndef get_umbrella_auth():\n    \"\"\"Encode the umbrella auth key and secret\"\"\"\n    encoded_secret = base64.b64encode(\n        f\"{UMBRELLA_MANAGEMENT_KEY}:{UMBRELLA_MANAGEMENT_SECRET}\".encode(\"utf-8\")\n    )\n\n    return encoded_secret\n\n\ndef get_umbrella_blocklist(target_blocklist: str = TARGET_BLOCKLIST):\n    \"\"\"Get the target Umbrella blocklist\"\"\"\n    headers = {\n        \"Authorization\": f\"Basic {get_umbrella_auth().decode('utf-8')}\",\n        \"Content-Type\": \"application/json\",\n    }\n    response = requests.get(\n        f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists\",\n        headers=headers,\n    )\n    response.raise_for_status()\n    data = response.json()\n\n    # Loop over all pages (max 100 per page)\n    blocklists = data[\"data\"]\n    if data[\"meta\"][\"total\"] \u003e 100:\n        for page in range(1, data[\"meta\"][\"total\"] // 100 + 1):\n            response = requests.get(\n                f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists?page={page}\",\n                headers=headers,\n            )\n            response.raise_for_status()\n            blocklists.extend(response.json()[\"data\"])\n\n    # Find the blocklist we want\n    for blocklist in blocklists:\n        if blocklist[\"name\"] == target_blocklist:\n            return blocklist\n\n\ndef get_umbrella_blocklist_destinations(target_blocklist: str):\n    \"\"\"Get the destinations for the target Umbrella blocklist\"\"\"\n    headers = {\n        \"Authorization\": f\"Basic {get_umbrella_auth().decode('utf-8')}\",\n        \"Content-Type\": \"application/json\",\n    }\n    response = requests.get(\n        f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists/{target_blocklist['id']}/destinations\",\n        headers=headers,\n    )\n    response.raise_for_status()\n\n    # Loop over all pages (max 100 per page)\n    data = response.json()\n    existing_data = data[\"data\"]\n    if data[\"meta\"][\"total\"] \u003e data[\"meta\"][\"limit\"]:\n        for page in range(1, data[\"meta\"][\"total\"] // 100 + 1):\n            response = requests.get(\n                f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists?page={page}\",\n                headers=headers,\n            )\n            response.raise_for_status()\n            existing_data.extend(response.json()[\"data\"])\n\n    return existing_data\n\n\ndef remove_umbrella_blocklist_destinations(\n    target_blocklist: str, domains_to_remove: list\n):\n    \"\"\"Add domains to the target Umbrella blocklist\"\"\"\n    headers = {\n        \"Authorization\": f\"Basic {get_umbrella_auth().decode('utf-8')}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    response = requests.delete(\n        f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists/{target_blocklist['id']}/destinations/remove\",\n        headers=headers,\n        json=[int(i) for i in domains_to_remove],\n    )\n    response.raise_for_status()\n    print(\n        f\"Successfully removed {len(domains_to_remove)} domains from {target_blocklist['name']}\"\n    )\n\n\ndef add_umbrella_blocklist_destinations(target_blocklist: str, domains_to_add: list):\n    \"\"\"Add domains to the target Umbrella blocklist\"\"\"\n    headers = {\n        \"Authorization\": f\"Basic {get_umbrella_auth().decode('utf-8')}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    response = requests.post(\n        f\"https://management.api.umbrella.com/v1/organizations/{UMBRELLA_ORG_ID}/destinationlists/{target_blocklist['id']}/destinations\",\n        headers=headers,\n        json=[\n            {\"destination\": domain, \"comment\": \"Added via MCAS Sync\"}\n            for domain in domains_to_add\n        ],\n    )\n    response.raise_for_status()\n    print(\n        f\"Successfully added {len(domains_to_add)} domains to {target_blocklist['name']}\"\n    )\n\n\ndef update_umbrella_blocklist(target_blocklist: str, mcas_blocklist: list):\n    \"\"\"Update the target Umbrella blocklist\"\"\"\n    existing_data = get_umbrella_blocklist_destinations(target_blocklist)\n    existing_domains = [domain[\"destination\"] for domain in existing_data]\n\n    # Add any new domains\n    domains_to_add = []\n\n    # Check if any mcas domains are not in the umbrella blocklist\n    for domain in mcas_blocklist:\n        if domain in existing_domains:\n            continue\n        # Add the domain to the umbrella blocklist\n        domains_to_add.append(domain)\n\n    # Add the new domains to the umbrella blocklist\n    if domains_to_add:\n        add_umbrella_blocklist_destinations(target_blocklist, domains_to_add)\n\n    # Check if any umbrella domains are not in the mcas blocklist\n    domains_to_remove = []\n    for domain in existing_data:\n        if domain[\"destination\"] in mcas_blocklist:\n            continue\n        # Remove the domain from the umbrella blocklist\n        domains_to_remove.append(domain[\"id\"])\n\n    # Remove the domains from the umbrella blocklist\n    if domains_to_remove:\n        remove_umbrella_blocklist_destinations(target_blocklist, domains_to_remove)\n\n\n\nblocklist = get_umbrella_blocklist()\nmcas_apps = get_mcas_blocklist()\n\nprint(f\"Found MCAS Domains: {len(mcas_apps)}\")\nprint(f\"Found Umbrella Domains: {blocklist['meta']['destinationCount']}\")\n\n# Check for any delta between the two lists\nupdate_umbrella_blocklist(blocklist, mcas_apps)",
          "skip_execution": false
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "triggers": {
    "triggerschedule_01ZA7BKQ25COE0FpSZMsaHe9qQ9LOqmWlYJ": {
      "workflow_id": "definition_workflow_01ZA78KI6QSLC6gcXhudQZDRoakc3qqNwkC",
      "name": "Every 30 Minutes",
      "title": "",
      "lowercase_name": "schedule.every_30_minutes",
      "type": "schedule",
      "base_type": "trigger",
      "ref_id": "schedule_01ZA7BFU95PHD33ER9DHzDSJOFy78A2nNk4",
      "version": "1.0.0",
      "disabled": false,
      "unique_name": "triggerschedule_01ZA7BKQ25COE0FpSZMsaHe9qQ9LOqmWlYJ",
      "object_type": "triggerschedule"
    }
  },
  "schedules": {
    "schedule_01ZA7BFU95PHD33ER9DHzDSJOFy78A2nNk4": {
      "unique_name": "schedule_01ZA7BFU95PHD33ER9DHzDSJOFy78A2nNk4",
      "name": "Every 30 minutes",
      "type": "basic.schedule",
      "base_type": "schedule",
      "properties": {
        "calendar": "calendar_recurring_1BMfMWvgiDhSjBQ7hTSyvz3NyVZ",
        "timezone": "Australia/Brisbane",
        "starttime": "00:00",
        "interval_hours": 0,
        "interval_minutes": 30,
        "number_of_times": 48,
        "display_name": "Every 30 minutes",
        "description": ""
      },
      "version": "1.0.0",
      "object_type": "schedule"
    }
  }
}